// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  admin
  seller
  buyer
}

enum OrderStatus {
  successful
  delivered
  pending
  progress
  failed
  cancelled
}

enum TransactionCategory {
  commision
  settlement
}

model Document {
  id           String  @id @default(cuid())  
  url          String  
  public_id    String  
  user         User?    @relation(fields: [userId], references: [id])

  // Foreign key
  userId       String?  @unique
}

model IncorporationCertificate {
  id           String  @id @default(cuid())  
  url          String  
  public_id    String  
  user         User?    @relation(fields: [userId], references: [id])

  // Foreign key
  userId       String?  @unique
}

model CACForm {
  id           String  @id @default(cuid())  
  url          String  
  public_id    String  
  user         User?    @relation(fields: [userId], references: [id])

  // Foreign key
  userId       String?  @unique
}

model Avatar {
  id           String  @id @default(cuid())  
  url          String  
  public_id    String  
  user         User?    @relation(fields: [userId], references: [id])

  // Foreign key
  userId       String?  @unique
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String   @unique
  password      String?
  image         String?
  role          UserRole @default(buyer)
  emailVerified DateTime?
  businessName  String?   @unique @default("")
  rcNumber      String?   @unique @default("")
  address       String?   @default("")
  phoneNumber   String?   @unique @default("")
  businessDescription String? @default("")
  isVerifiedSeller  Boolean @default(false)
  isVerifiedBuyer  Boolean @default(false)

  wallet        Wallet?
  avatar        Avatar?
  CACForm       CACForm?
  incorporationCertificate      IncorporationCertificate?
  document      Document?
  products      Product[]
  accounts      Account[]
  buyerOrders   Order[] @relation("OrderToBuyer")
  sellerOrders   Order[] @relation("OrderToSeller")
  buyerTransactions  Transaction[] @relation("TransactionToBuyer")
  sellerTransactions  Transaction[] @relation("TransactionToSeller")

  updatedAt     DateTime    @updatedAt
}

model Product {
  id            String        @id @default(cuid())
  price         Decimal
  description   String?
  isAvailable   Boolean
  numberInStock Decimal

  seller        User          @relation(fields: [sellerId], references: [id])
  density       Decimal

  // Foreign key
  sellerId      String

  orders        Order[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Order {
  id                    String      @id @default(cuid())
  quantity              Decimal
  amount                Decimal
  orderNumber           String
  orderDate             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  expectedDeliveryDate  DateTime
  status                OrderStatus @default(pending)
  deliveryAddress       String
  isPaid                Boolean      @default(false)
  businessName          String
  email                 String
  phoneNumber           String
  message               String?
  channel               String

  seller                User        @relation("OrderToSeller", fields: [sellerId], references: [id])
  buyer                 User        @relation("OrderToBuyer", fields: [buyerId], references: [id])
  product               Product     @relation(fields: [productId], references: [id])

  // Foreign keys
  sellerId              String
  buyerId               String
  productId             String

   @@index([productId])
   @@index([buyerId])
   @@index([sellerId])
}

model Transaction {
  id                 String  @id @default(cuid())
  channel            String
  reference          String
  orderNumber        String
  amount             Decimal
  quantity           Decimal
  date               DateTime    @default(now())
  category           TransactionCategory

  buyer                 User?        @relation("TransactionToBuyer", fields: [buyerId], references: [id])
  seller                User?        @relation("TransactionToSeller", fields: [sellerId], references: [id])

  // Foreign keys
  buyerId               String?
  sellerId              String?

  @@index([buyerId])
  @@index([sellerId])
}

model Wallet {
  id                 String     @id @default(cuid())
  balance            Decimal    @default(0)

  user               User?          @relation(fields: [userId], references: [id])

  // Foreign Key
  userId             String  @unique
  
  updatedAt          DateTime   @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}